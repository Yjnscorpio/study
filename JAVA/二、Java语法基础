2016-12-28
Java中共有8种基本数据类型，包括4 种整型、2 种浮点型、1 种字符型、1 种布尔型，请见下表。
                                Java基本数据类型        
数据类型    	说明 	         所占内存   	举例 	                       备注
byte 	       字节型 	        1 byte 	     3, 127 	 
short 	     短整型 	        2 bytes   	 3, 32767 	 
int 	       整型         	 4 bytes    	3, 21474836 	 
long 	       长整型 	        8 bytes 	   3L, 92233720368L           	 long最后要有一个L字母（大小写无所谓）。
float 	     单精度浮点型 	  4 bytes   	 1.2F, 223.56F              	 float最后要有一个F字母（大小写无所谓）。
double     	 双精度浮点型 	  8 bytes 	   1.2, 1.2D, 223.56, 223.56D 	 double最后最好有一个D字母（大小写无所谓）。
char 	       字符型          2 bytes     	'a', ‘A’ 	                    字符型数据只能是一个字符，由单引号包围。
boolean 	   布尔型 	        1 bit 	      true, false 	 

对于整型数据，通常情况下使用 int 类型。但如果表示投放广岛长崎的原子弹释放出的能量，就需要使用 long 类型了。byte 和 short 类型主要用于特定的应用场合，例如，底层的文件处理或者需要控制占用存储空间量的大数组。

八进制有一个前缀 0，例如 010 对应十进制中的 8；十六进制有一个前缀 0x，例如 0xCAFE；从 Java 7 开始，可以使用前缀 0b 来表示二进制数据，例如 0b1001 对应十进制中的 9。同样从 Java 7 开始，可以使用下划线来分隔数字，类似英文数字写法，例如 1_000_000 表示 1,000,000，也就是一百万。下划线只是为了让代码更加易读，编译器会删除这些下划线。

另外，不像 C/C++，Java 不支持无符号类型(unsigned)。
float 类型有效数字最长为 7 位，有效数字长度包括了整数部分和小数部分。例如：
    float x = 223.56F;
    float y = 100.00f;
注意：每个float类型后面都有一个标志“F”或“f”，有这个标志就代表是float类型。

double 类型有效数字最长为 15 位。与 float 类型一样，double 后面也带有标志“D”或“d”。例如：
    double x = 23.45D;
    double y = 422.22d;
    double z = 562.234;
注意：不带任何标志的浮点型数据，系统默认是 double 类型。

 对布尔型的说明
如果你有编程经验，了解布尔型，请跳过下面的教程，下面的教程针对只有C语言基础的读者（C语言没有布尔型）。
在C语言中，如果判断条件成立，会返回1，否则返回0，例如：
    #include <stdio.h>
    int main(){
        int x = 100>10;
        int y = 100<10;
        printf("100>10 = %d\n", x);
        printf("100<10 = %d\n", y);
        return 0;
    }
运行结果：
100>10 = 1
100<10 = 0

但是在Java中不一样，条件成立返回 true，否则返回 false，即布尔类型。例如：
    public class Demo {
        public static void main(String[] args){
            // 字符型
            boolean a = 100>10;
            boolean b = 100<10;
            System.out.println("100>10 = " + a);
            System.out.println("100<10 = " + b);
           
            if(a){
                System.out.println("100<10是对的");
            }else{
                System.out.println("100<10是错的");
            }
        }
    }
运行结果：
100>10 = true
100<10 = false
100<10是对的
实际上，true 等同于1，false 等同于0，只不过换了个名称，并单独地成为一种数据类型。

 自动数据类型转换
自动转换按从低到高的顺序转换。不同类型数据间的优先关系如下：
    低--------------------------------------------->高
    byte,short,char-> int -> long -> float -> double

运算中，不同类型的数据先转化为同一类型，然后进行运算，转换规则如下：
操作数1类型 	                           操作数2类型 	转换后的类型
byte、short、char 	                      int 	       int
byte、short、char、int 	                 long      	  long
byte、short、char、int、long 	           float     	  float
byte、short、char、int、long、float     	double 	     double
强制数据类型转换
强制转换的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。有的数据经过转型运算后，精度会丢失，而有的会更加精确，下面的例子可以说明这个问题。
    public class Demo {
        public static void main(String[] args){
            int x;
            double y;
            x = (int)34.56 + (int)11.2;  // 丢失精度
            y = (double)x + (double)10 + 1;  // 提高精度
            System.out.println("x=" + x);
            System.out.println("y=" + y);
        }
    }

运行结果：
x=45
y=56.0
仔细分析上面程序段：由于在 34.56 前有一个 int 的强制类型转化，所以 34.56 就变成了 34。同样 11.2 就变成了 11 了，所以 x 的结果就是 45。在 x 前有一个 double 类型的强制转换，所以 x 的值变为 45.0，而 10 的前面也被强制成 double 类型，所以也变成 10.0，所以最后 y 的值变为 56。


  数学运算符
数学运算，结果为一个数值。见下表：
运算符 	说明 	 举例
+ 	     加法 	1 + 2
- 	     减法 	4 - 3.4
* 	     乘法 	7 * 1.5
/ 	     除法 	3.5 / 7
% 	     取余 	7 % 2
++ 	     自增 	3++
-- 	     自减 	3--

关系运算符
关系运算符，结果为一个布尔值。见下表：
运算符 	说明 	      举例
> 	     大于 	    a > 4.2
>= 	     大于等于 	3.4 >= b
< 	     小于 	    1.5 < 9
<= 	     小于等于 	6 <= 1
== 	     等于 	    2 == 2
!= 	     不等于 	   2 != 2
&& 	     与       	true && false
|| 	     或 	      (3 > 1) || (2 == 1)
! 	     非      	!true

位运算符
位运算符对整数的二进制形式逐位进行逻辑运算，得到一个整数。见下表：
运算符 	说明   	举例
& 	     与 	   1 & 4
| 	     或 	   2 | 5
^ 	     异或 	2 ^ 3
~ 	     非 	   ~5
<< 	     左移 	5 << 3
>> 	     右移 	6 >> 1

条件运算符
Java中也有一个条件运算符（三目运算符）：
    condition ? x1 : x2
condition为一个boolean值。根据condition，取x1或x2的值。
下面是关于运算符的一个综合举例：
    public class Demo {
        public static void main(String[] args){
            int a=10;
            int b=10;
           
            int x=10;
            int y=21;
            int z=10;
           
            System.out.println("后自加 a=" + (a++));
            System.out.println("a的值 a=" + a);
            System.out.println("前自加 b=" + (++b));
           
            System.out.println("---------------------");
            System.out.println("说 x>y,对吗？" + (x>y));
            System.out.println("认为 x>y 并且 x<y,对吗？" + ( (x>y) && (x<y) ));
            System.out.println("认为 x>=y 或者 x==y,对吗？" + ( (x>=y) || (x==y) ));
            System.out.println("认为 x<y 或者 x=z,对吗？" + ( (x<y) || (x==z) ));
            System.out.println("---------------------");
            System.out.println("a&x 的结果是：" + (a&x));
            System.out.println("a|x 的结果是：" + (a|x));
            System.out.println("y^z 的结果是：" + (y^z));
           
            System.out.println("---------------------");
            System.out.println("a 左移2位的结果是：" + (a<<2));
            System.out.println("y 右移3位的结果是：" + (y>>3));
        }
    }
运行结果：
后自加 a=10
a的值 a=11
前自加 b=11
---------------------
说 x>y,对吗？false
认为 x>y 并且 x<y,对吗？false
认为 x>=y 或者 x==y,对吗？false
认为 x<y 或者 x=z,对吗？true
---------------------
a&x 的结果是：10
a|x 的结果是：11
y^z 的结果是：31
---------------------
a 左移2位的结果是：44
y 右移3位的结果是：2

Java流程控制的语法与 C/C++ 类似，也有 if...else、while、do...while、for、switch...case等，这里不再讲述具体语法，仅举例说明。
输出九九乘法表（右上三角）：
    public class Demo {
        public static void main(String[] args){
            int i, j;
            for(i=1; i<=9; i++){
                for(j=1; j<=9; j++){
                    if(j<i){
                        //打印八个空格，去掉空格就是左上三角形
                        System.out.print("        ");
                    }else{
                        System.out.printf("%d*%d=%2d  ", i, j, i*j);
                    }
                }
                System.out.print("\n"); 
            }
        }
    }
运行结果：
1*1= 1  1*2= 2  1*3= 3  1*4= 4  1*5= 5  1*6= 6  1*7= 7  1*8= 8  1*9= 9 
        2*2= 4  2*3= 6  2*4= 8  2*5=10  2*6=12  2*7=14  2*8=16  2*9=18 
                3*3= 9  3*4=12  3*5=15  3*6=18  3*7=21  3*8=24  3*9=27 
                        4*4=16  4*5=20  4*6=24  4*7=28  4*8=32  4*9=36 
                                5*5=25  5*6=30  5*7=35  5*8=40  5*9=45 
                                        6*6=36  6*7=42  6*8=48  6*9=54 
                                                7*7=49  7*8=56  7*9=63 
                                                        8*8=64  8*9=72 
                                                                9*9=81
Java中也有 printf() 语句，用来控制输出格式，不过实际开发中不常用，因为输出到控制台的数据很少要求严格的格式，一般 println() 和 print() 就够了。
println() 输出内容后换行，print() 不换行。
又如，求某一年的某一月有多少天：
    import java.util.*;
    public class Demo {
        public static void main(String[] args){
            int days = 0;
            // 获取用户输入
            Scanner sc = new Scanner(System.in);
            System.out.print("输入年份：");
            int year = sc.nextInt();
            System.out.print("输入月份：");
            int month = sc.nextInt();
           
            switch(month){
                case 1:
                case 3:
                case 5:
                case 7:
                case 8:
                case 10:
                case 12:
                    days=31;
                    break;
                case 4:
                case 6:
                case 9:
                case 11:
                    days=30;
                    break;
                case 2:
                    // 判断闰年
                    if(year%4==0 && year%100!=0 || year%400==0)
                        days=29;
                    else
                        days=28;
                    break;
                default:
                    System.out.println("月份输入错误！");
                    System.exit(0);  // 强制结束程序
            }
            System.out.printf("天数：%d\n", days);
        }
    }
运行结果：
输入年份：2014
输入月份：02
天数：28
Java中没有像C语言中的scanf()语句，从控制台获取输入有点麻烦，我推荐使用 Scanner 类，具体语法请大家自行查看API。


