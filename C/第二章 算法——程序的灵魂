一个程序主要包括以下两方面的信息：
 （1）对数据的描述。在程序中要指定用到哪些数据以及这些数据的类型和数据的组织形式。这就是数据结构。
 （2）对操作的描述。即要求计算机进行操作的步骤，也就是算法（algorithm）。
                    算法+数据结构=程序（著名计算机科学家沃思（Nikiklaus Writh）提出）
算法、数据结构、程序设计方法和语言工具是一个程序设计人员应具备的知识

					
2.1 什么是算法？
广义的说，为解决一个问题而采取的方法和步骤，就称为“算法”。
计算机算法可分为两大类别：数值运算算法和非数值运算算法。
数值运算的目的是求数值解，例如求方程的根、求一个函数的定积分等，都属于数值运算范围。
非数值运算包括的面十分广泛，最常见的是用于事务管理领域。


2.2 简单的算法举例
由于计算机是高速运算的自动机器，实现循环是轻而易举的，所有计算机高级语言中都有实现循环的语句。


2.3 算法的特性
一个有效算法应该具有以下特点：
 （1）有穷性。一个算法应包含有限的操作步骤，而不能是无限的。有穷性往往指“在合理的范围之内”。
 （2）确定性。算法中的每一个步骤都应当是确定的，而不应当时含糊的、模棱两可的。
 （3）有零个或多个输入。所谓输入是指在执行算法时需要从外界取得必要的信息。
 （4）有一个或多个输出。算法的目的是为了求解，解就是输出。
 （5）有效性。算法中的每一个步骤都应当能有效地执行，并得到确定的结果。
 
 
2.4 怎样表示一个算法
常用的方法有：自然语言、传统流程图、结构化流程图和伪代码等。

2.4.1 用自然语言表示算法
自然语言就是人们日常使用的语言，用自然语言表示会通俗易懂，但文字冗长，容易出现歧义。
用自然语言来描述包含分支和循环的算法不大方便。因此，除了那些很简单的问题以外，一般不用自然语言表示算法。

2.4.2 用流程图表示算法
流程图是用一些图框来表示各种操作。用图形表示算法，直观形象，易于理解。
菱形框的作用是对一个给定的条件进行判断，根据给定的条件是否成立决定如何执行其后的操作。
流程图是表示算法的较好的工具，一个流程图包括以下几个部分：
（1）表示相应操作的框。
（2）带箭头的流程线。
（3）框内外必要的文字说明。
需要提醒的是：流程线不要忘记画箭头，因为他是反映流程的先后的，如不画出箭头就难以判定各框的执行次序了。

2.4.3 三种基本结构和改进的流程图
1、传统流程图的弊端。
传统的流程图用流程线指出各框的执行顺序，对流程线的使用没有严格限制。因为，使用者可以不受限制的使流程随意地转来转去，使流程图变得毫无规律，阅读时要花很大精力去追踪流程，使人难以理解算法的逻辑。
这种如同乱麻一样的算法称为BS型算法。
2、三种基本结构。
（1）顺序结构。顺序结构是最简单的一种基本结构。
（2）选择结构。选择结构又称选取结构或分支结构。此结构中必包含一个判断框。
（3）循环结构。又称重复结构，即反复执行某一部分的操作，有以下两类：
①当型（while型）循环结构。
作用是：当给定的条件p1成立时，执行A框操作，执行完A后，在判断条件p1是否成立，如果仍然成立，再执行A框，如此反复执行A框，之道某一次p1条件不成立为止，此时不执行A框，而从b点脱离循环结构。
②直到型（until）循环结构。




























































