1.1 什么是计算机程序。
所谓程序，就是一组计算机能识别和执行的指令。每一条指令使计算机执行特定的操作。
计算机的本质是程序的机器，程序和指令使计算机系统中最基本的概念。  


1.2 什么是计算机语言。 
计算机和人都能识别的语言就是计算机语言。计算机语言经历了几个阶段：
①机器语言：  
在计算机发展的初期，一半计算机的指令长度为16，即以16个二进制数（0或1）组成一条指令，组成各种排列组合。这种计算机能直接识别和接受的二进制代码称为机器指令。机器指令的集合就是该计算机的机器语言。在语言的规则中规定各种指令的表现形式以及它的作用。
②符号语言：
为了克服机器语言的缺点，人们创造出符号语言，它用一些英文字母和数字表示一个指令。
计算机并不能直接识别和执行符号语言的指令，需要用一种称为汇编程序的软件，把符号语言的指令转换为机器指令。一般，一条符号语言的指令对应转换为一条机器指令。转换的过程称为“代真”或“汇编”。因此，符号语言又称为符号汇编语言和汇编语言。
以上两种语言统称为低级语言。
③高级语言：
20世纪50年代创造出了第一个计算机高级语言--FORTRAN语言。
计算机不能直接识别高级语言程序，需要进行“翻译”。用一种称为编译程序的软件把用高级语言写的程序（称为源程序）转换为机器指令的程序（称为目标程序），然后让计算机执行机器指令程序，最后得到结果。高级语言的一个语句往往对应多条机器指令。

高级语言经历了不同的发展阶段：
⑴非结构化的语言。初期的语言属于非结构化的语言，编程风格比较随意，只要符合语法规则即可，没有严格的规范要求，程序中的流程可以随意跳转。
⑵结构化语言。规定程序必须由具有良好特性的基本结构（顺序结构、分支结构、循环结构）构成，程序中的流程不允许随意跳转，程序总是由上而下顺序执行各个基本结构。
⑶面向对象的语言。


1.3 C语言的发展及其特点
C语言是国际上广泛流行的计算机高级语言。
1972-1973年间，美国贝尔实验室的D.M.Ritchie在B语言的基础上设计出了C语言。
C语言是一种用途广泛、功能强大、使用灵活的过程性编程语言，既可用于编写应用软件，又能用于编写系统软件。
C语言有以下一些主要特点：
（1）语言简洁、紧凑，使用方便、灵活。 C语言一共只有37个关键字、9种控制语句，程序书写形式自由，主要用小写字母便是，压缩了一切不必要的成分。
（2）运算符丰富。C语言的运算符包含的范围很广泛，共有34种运算符。C语言吧括号、赋值和强制类型转换等都作为运算符处理，从而使C语言的运算类型极其丰富，表达式类型多样化。
（3）数据类型丰富。
（4）具有结构化的控制语句。
（5）语法限制不太严格，程序设计自由度大。
（6）C语言允许直接访问物理地址，能进行位（bit）操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作。
（7）用C语言编写的程序可移植性好。
（8）生成目标代码质量高，程序执行效率高。


1.4 最简单的C语言程序。
1.4.1 练习题
（1）输出：This is a C program.
#include<stdio.h>
int main()
{
	printf("This is a C program.\n");
} 

（2）求两个整数之和。
#include<stdio.h>
int main()
{
	int a,b,sum;
	a=123;
	b=456;
	sum=a+b;
	printf("sum is %d\n",sum);    //%d 是指定的输出格式
	return 0;
}

（3）求两个整数中的较大者。
#include <stdio.h>
int main( )                          // 定义主函数
{                                    // 主函数体开始
 int max(int x,int y);              // 对被调用函数max的声明 
 int a,b,c;                          // 定义变量a，b，c
 scanf("%d,%d",&a,&b);               // 输入变量a和b的值
 c = max(a,b);                     // 调用max函数，将得到的值赋给c 
 printf("max=%d\n",c);               // 输出c的值
 return 0;                           // 返回函数值为0
}

int max(int x,int y)               //定义max函数,函数值为整型, 形式参数x和y为整型 
{
 int z;                             // max函数中的声明部分，定义本函数中用到的变量z为整型 
 if (x > y) z = x;
 else z = y;
 return(z);                        //将z的值返回，通过max带回到调用函数的位置
}

1.4.2 C语言程序的结构
C语言程序的结构有以下特点：
（1）一个程序由一个或多个源程序文件组成。一个源程序中可以包含3个部分：
①预处理指令。如#include<stdio.h>。
②全局声明。即在函数之外进行的数据声明。例如int a,b;  在main函数的前面，这就是全局声明，在函数外面声明的变量称为全局变量。
③函数定义。每个函数是用来实现一定的功能。在调用这些函数时，会完成函数定义中指定的功能。
（2）函数是C程序的主要组成部分。
程序的几乎全部工作都是由各个函数分别完成的，函数是C程序的基本单位，在设计良好的程序中，每个函数都用来实现一个或几个特点的功能。
（3）一个函数包括两个部分。
①函数首部。即函数的第1行，包括函数名、函数类型、函数属性、函数参数（形式参数）名、参数类型。
例： int           max      (int              x,             int               y)
     函数类型     函数名     函数参数类型     函数参数名     函数参数类型     函数参数名
②函数体。 即函数首部下面的花括号内的部分。一般包括以下两部分。
      声明部分-包括定义在本函数中所用到的变量，对本函数所调用函数进行声明。
	  执行部分-由若干个语句组成，指定在函数中所进行的操作。
（4）程序总是从main函数开始执行的，而不论main函数在整个程序中的位置如何。
（5）程序中对计算机的操作是有函数中的C语句完成的。
（6）在每个数据声明和语句的最后必须有一个分号。
（7）C语言本身不提供输入输出语句。输入和输出的操作是由库函数scanf和printf等函数来完成的。
（8）程序应当包含注释。一个好的、有使用价值的源程序都应当加上必要的注释，以增加程序的可读性。


1.5 运行C程序的步骤和方法


1.6 程序设计的任务
从确定问题到最后完成任务，一般经历以下几个工作阶段：
（1）问题分析。研究所给定的条件，分析最后应达到的目标，找出解决问题的规律，选择解题的方法。
（2）设计算法。设计出解题的方法和具体步骤。
（3）编写程序。根据得到的算法，用一种高级语言编写出源程序。
（4）对源程序进行编辑、编译和连接，得到可执行程序。
（5）运行程序，分析结果。要对结果进行分析，看它是否合理，是否和预期结果相符合。
（6）编写程序文档。内容应包括：程序名称、程序功能、运行环境、程序的装入和启动、需要输入的数据，以及使用注意事项等。
